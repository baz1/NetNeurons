/*!
    \class Matrix
    \inmodule NetNeurons
    \ingroup NetNeurons

    \brief This class allows you to manipulate matrices in any field you wish.
    
    Note that the field \c T that is used must implement a conversion from type int.
*/

/*!
    \fn Matrix<T>::Matrix()

    Constructs a new null matrix.
*/

/*!
    \fn Matrix<T>::Matrix(const Matrix<T> &other)

    Constructs a shallow copy of the matrix \a other.
*/

/*!
    \fn Matrix<T>::Matrix(int m, int n, T *data)
    
    Constructs a matrix from its data, \a m being the number of rows,
    \a n the number of columns and \a data the value of the matrix,
    \tt {data[i*n+j]} being the value at the i-th row, j-th column.

    \warning the value \a data passed to this function should have
    been allocated with \c new, should contain at least \tt {m*n} elements
    and must not be freed: the matrix destructor will do the deletion.

    \note If \a data is null, this will create a null matrix.
*/

/*!
    \fn Matrix<T>::Matrix(int m, int n)
    
    Constructs a matrix with size \a m times \a n initialized with zero-data
    (corresponds to real zeros for all the primitive types in C).

    \note If \tt {(m<=0)||(n<=0)}, this will create a null matrix.
*/

/*!
    \fn Matrix<T>::Matrix(int m, int n, T value)
    
    Constructs a matrix with size \a m times \a n initialized with the value \a value everywhere.

    \note If \tt {(m<=0)||(n<=0)}, this will create a null matrix.
*/

/*!
    \fn Matrix<T>::~Matrix()

    Destructs the matrix.
*/

/*!
    \fn bool Matrix<T>::isNull() const

    Returns \c true if this matrix is null, \c false otherwise.
*/

/*!
    \fn const T &Matrix<T>::operator()(const quint16 &i, const quint16 &j) const

    Returns the value in the matrix at row \a i and column \a j as a const reference.

    \warning Assumes that the matrix is not null.
    \warning indexes start at 0.
*/

/*!
    \fn T &Matrix<T>::operator()(const quint16 &i, const quint16 &j)

    Returns the value in the matrix at row \a i and column \a j as a modifiable reference.

    \warning Assumes that the matrix is not null.
    \warning indexes start at 0.
*/

/*!
    \fn const T* Matrix<T>::constData() const

    Returns a const reference to the internal data.

    \warning Use with caution!
*/

/*!
    \fn T* Matrix<T>::data()

    Returns a modifiable reference to the internal data.

    \warning Use with caution!
*/

/*!
    \fn void Matrix<T>::fill(T value)

    Fills the matrix with the value \a value.

    \warning Assumes that the matrix is not null.
*/

/*!
    \fn void Matrix<T>::fillZero()

    Fills the matrix with zero-data.

    \warning Assumes that the matrix is not null.
*/

/*!
    \fn int Matrix<T>::countRows() const

    Returns the number of rows of the matrix, or 0 if the matrix is null.
*/

/*!
    \fn int Matrix<T>::countCols() const

    Returns the number of columns of the matrix, or 0 if the matrix is null.
*/

/*!
    \fn void Matrix<T>::addIdentity() const

    Adds a diagonal of 1s to the matrix, ending at the minimal dimension.

    \warning Assumes that the matrix is not null.
*/

/*!
    \fn Matrix<T> &Matrix<T>::operator=(const Matrix<T> &other)

    Assigns the value of \a other to this matrix and returns a reference to it.
*/

/*!
    \fn bool Matrix<T>::operator==(const Matrix<T> &other) const

    Returns \c true if this matrix and \a other hold the same data, \c false otherwise.
*/

/*!
    \fn bool Matrix<T>::operator!=(const Matrix<T> &other) const

    Returns \c true if this matrix and \a other hold different data, \c false otherwise.
*/

/*!
    \fn Matrix<T> &Matrix<T>::operator+=(const Matrix<T> &other)

    Appends \a other to this matrix, and returns a reference to it.

    \warning Assumes that the two matrices are not null and have the same dimensions.
*/

/*!
    \fn Matrix<T> &Matrix<T>::operator-=(const Matrix<T> &other)

    Subtracts \a other to this matrix, and returns a reference to it.

    \warning Assumes that the two matrices are not null and have the same dimensions.
*/

/*!
    \fn Matrix<T> Matrix<T>::operator+() const

    Returns a copy of this matrix.
*/

/*!
    \fn Matrix<T> Matrix<T>::operator-() const

    Returns the opposit of this matrix.

    \warning Assumes that the matrix is not null.
*/

