/*!
    \class Matrix
    \inmodule NetNeurons
    \ingroup NetNeurons

    \brief This class allows you to manipulate matrices in any field you wish.
    
    Note that the field \c T that is used must implement a conversion from type int.
*/

/*!
    \fn Matrix<T>::Matrix()

    Constructs a new null matrix.
*/

/*!
    \fn Matrix<T>::Matrix(const Matrix<T> &other)

    Constructs a shallow copy of the matrix \a other.
*/

/*!
    \fn Matrix<T>::Matrix(int m, int n, T *data)
    
    Constructs a matrix from its data, \a m being the number of rows,
    \a n the number of columns and \a data the value of the matrix,
    \tt {data[i*n+j]} being the value at the i-th row, j-th column.

    \warning the value \a data passed to this function should have
    been allocated with \c new, should contain at least \tt {m*n} elements
    and must not be freed: the matrix destructor will do the deletion.

    \note If \a data is null, this will create a null matrix.
*/

/*!
    \fn Matrix<T>::Matrix(int m, int n)
    
    Constructs a matrix with size \a m times \a n initialized with zero-data
    (corresponds to real zeros for all the primitive types in C).

    \note If \tt {(m<=0)||(n<=0)}, this will create a null matrix.
*/

/*!
    \fn Matrix<T>::Matrix(int m, int n, T value)
    
    Constructs a matrix with size \a m times \a n initialized with the value \a value everywhere.

    \note If \tt {(m<=0)||(n<=0)}, this will create a null matrix.
*/

/*!
    \fn Matrix<T>::~Matrix()

    Destructs the matrix.
*/

/*!
    \fn bool Matrix<T>::isNull() const

    Returns \c true if this matrix is null, \c false otherwise.
*/

/*!
    \fn const T &Matrix<T>::operator()(const quint16 &i, const quint16 &j) const

    Returns the value in the matrix at row \a i and column \a j as a const reference.

    \warning Assumes that the matrix is not null.
    \warning indexes start at 0.
*/

/*!
    \fn T &Matrix<T>::operator()(const quint16 &i, const quint16 &j)

    Returns the value in the matrix at row \a i and column \a j as a modifiable reference.

    \warning Assumes that the matrix is not null.
    \warning indexes start at 0.
*/

/*!
    \fn const T* Matrix<T>::constData() const

    Returns a const reference to the internal data.

    \warning Use with caution!
*/

/*!
    \fn T* Matrix<T>::data()

    Returns a modifiable reference to the internal data.

    \warning Use with caution!
*/

/*!
    \fn void Matrix<T>::fill(T value)

    Fills the matrix with the value \a value.

    \warning Assumes that the matrix is not null.
*/

/*!
    \fn void Matrix<T>::fillZero()

    Fills the matrix with zero-data.

    \warning Assumes that the matrix is not null.
*/

/*!
    \fn bool Matrix<T>::isZero(const T &negligible) const

    Returns true is this matrix only contains only zeros, with the precision \a negligible.

    \warning Assumes that the matrix is not null.
*/

/*!
    \fn int Matrix<T>::countRows() const

    Returns the number of rows of the matrix, or 0 if the matrix is null.
*/

/*!
    \fn int Matrix<T>::countCols() const

    Returns the number of columns of the matrix, or 0 if the matrix is null.
*/

/*!
    \fn Matrix<T> &Matrix<T>::addIdentity()

    Adds a diagonal of 1s to the matrix, ending at the minimal dimension,
    and returns a reference to the modified matrix.

    \warning Assumes that the matrix is not null.
*/

/*!
    \fn Matrix<T> &Matrix<T>::operator=(const Matrix<T> &other)

    Assigns the value of \a other to this matrix and returns a reference to it.
*/

/*!
    \fn bool Matrix<T>::operator==(const Matrix<T> &other) const

    Returns \c true if this matrix and \a other hold the same data, \c false otherwise.
*/

/*!
    \fn bool Matrix<T>::operator!=(const Matrix<T> &other) const

    Returns \c true if this matrix and \a other hold different data, \c false otherwise.
*/

/*!
    \fn Matrix<T> &Matrix<T>::operator+=(const Matrix<T> &other)

    Appends \a other to this matrix, and returns a reference to it.

    \warning Assumes that the two matrices are not null and have the same dimensions.
*/

/*!
    \fn Matrix<T> &Matrix<T>::operator-=(const Matrix<T> &other)

    Subtracts \a other to this matrix, and returns a reference to it.

    \warning Assumes that the two matrices are not null and have the same dimensions.
*/

/*!
    \fn Matrix<T> Matrix<T>::operator+() const

    Returns a copy of this matrix.
*/

/*!
    \fn Matrix<T> Matrix<T>::operator-() const

    Returns the opposit of this matrix.

    \warning Assumes that the matrix is not null.
*/

/*!
    \fn Matrix<T> Matrix<T>::operator+(const Matrix<T> &other) const

    Returns this matrix plus \a other.

    \warning Assumes that both matrices are not null.
*/

/*!
    \fn Matrix<T> Matrix<T>::operator-(const Matrix<T> &other) const

    Returns this matrix minus \a other.

    \warning Assumes that both matrices are not null.
*/

/*!
    \fn Matrix<T> &Matrix<T>::operator*=(const T &c)

    Multiplies this matrix with the coefficient \a c, and returns a reference to it.

    \warning Assumes that the matrix is not null.
*/

/*!
    \fn Matrix<T> &Matrix<T>::operator/=(const T &c)

    Divides this matrix with the coefficient \a c, and returns a reference to it.

    \warning Assumes that the matrix is not null.
*/

/*!
    \fn Matrix<T> &Matrix<T>::operator*=(const Matrix<T> &other)

    Multiplies this matrix with \a other, and returns a reference to it.

    \warning Assumes that both matrices are not null, and that their sizes match.
*/

/*!
    \fn Matrix<T> Matrix<T>::operator*(const Matrix<T> &other) const

    Returns the product of this matrix and \a other.

    \warning Assumes that both matrices are not null, and that their sizes match.
*/

/*!
    \fn Matrix<T> &Matrix<T>::partialProduct(const Matrix<T> &m1, const Matrix<T> &m2, int i1, int i2, int j1, int j2)

    Calculates the coefficients of the product of \a m1 with \a m2 for indices i in [\a i1, \a i2]
    and j in [\a j1, \a j2], and returns a reference to the modified matrix.

    \warning Assumes that the three matrices are not null, that their sizes match,
    and that \a i1, \a i2, \a j1, \a j2 are valid indexes given in the right order.

    \note You might use the \c prepareProduct function to initialize the product matrix with the
    right dimensions.

    \sa prepareProduct()
*/

/*!
    \fn Matrix<T> Matrix<T>::transpose() const

    Returns the transpose of the matrix.

    \warning Assumes that the matrix is not null.
*/

/*!
    \fn Matrix<T> Matrix<T>::timesTranspose(const Matrix<T> &other) const

    Returns the product of this matrix with the transpose of \a other.

    \note This function is faster than doing the two operations separately.

    \warning Assumes that both matrices are not null and that they have the same number of columns.
*/

/*!
    \fn T Matrix<T>::det() const

    Returns the determinant of the matrix.

    \warning Assumes that the matrix is not null and is a square matrix.
*/

/*!
    \fn Matrix<T> &Matrix<T>::operator/=(const Matrix<T> &other)

    Does a left-side multiplication with the inverse of \a other, and returns a reference to the modified matrix.

    \warning Assumes that both matrices are not null, that their sizes match and that \a other is invertible.
*/

/*!
    \fn Matrix<T> Matrix<T>::pseudoinverse(const T &negligible) const

    Returns the Mooreâ€“Penrose pseudoinverse of this matrix, using \a negligible as precision for equality tests with zero.

    \warning Assumes that the matrix is not null.
*/

/*!
    \fn T Matrix<T>::norm1() const

    Calculates the norm 1 of this matrix, that is the maximum absolute column sum of the matrix.

    \warning Assumes that the matrix is not null.

    \note The infinite norm \c norminf is slightly faster than this function.

    \sa norminf()
*/

/*!
    \fn T Matrix<T>::norminf() const

    Calculates the infinite norm of this matrix, that is the maximum absolute row sum of the matrix.

    \warning Assumes that the matrix is not null.

    \sa norm1()
*/

/*!
    \fn Matrix<T> Matrix<T>::mergeH(const Matrix<T> &m1, const Matrix<T> &m2)

    Merges horizontally the matrices \a m1 and \a m2 and returns the resulting matrix.

    \warning Assumes that both matrices are not null, and that their sizes match.
*/

/*!
    \fn Matrix<T> Matrix<T>::mergeV(const Matrix<T> &m1, const Matrix<T> &m2)

    Merges vertically the matrices \a m1 and \a m2 and returns the resulting matrix.

    \warning Assumes that both matrices are not null, and that their sizes match.
*/

/*!
    \fn Matrix<T> &Matrix<T>::cut(const Matrix<T> &other, int di, int dj, int si, int sj, int sm, int sn)

    Cuts the matrix \a other from row \a si, column \a sj with a size of \a sm rows and \a sn columns,
    and puts the resulting cut inside the current matrix at a destination starting at row \a di
    and column \a dj.

    \note \a sm and \a sn are maximum values that will be decreased according to the sizes of the current
    matrix and \a other. Also, \a di and \a dj might be negative, resulting in some ignored source values.
    Finally, if one of \a di, \a dj, \a si or \a sj is outside the size of one of the two matrices,
    the call is simply ignored.

    \warning Assumes that both matrices are not null, and that both \a si and \a sj are positive (or null).
*/

/*!
    \fn void Matrix<T>::print(FILE *stream, const char *(*toString) (T), const char *prepend) const

    Prints the content of this matrix in \a stream, using the function \a toString
    to convert elements to string values. \a prepend is added at the beginning of each line.
*/

/*!
    \fn static Matrix<T> Matrix<T>::prepareProduct(const Matrix<T> &m1, const Matrix<T> &m2)

    Constructs a new matrix that has dimensions corresponding to the product \a m1 times \a m2,
    but random data.

    \note This is to be used together with the \c getProduct function,
    either to calculate only a partial product or to distribute the calculation.

    \warning Assumes that both matrices are not null, and that their sizes match.

    \sa partialProduct()
*/

